// ========== STATE MANAGEMENT ========== //
const STORAGE_KEY = 'timeTrackerData';
let productivityChart = null;

function loadState() {
  const saved = localStorage.getItem(STORAGE_KEY);
  const today = new Date().toDateString();
  
  if (saved) {
    const state = JSON.parse(saved);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (state.lastActivityDate !== today) {
      saveDailyStats(state); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
      return getDefaultState(today);
    }
    return state;
  }
  return getDefaultState(today);
}

function getDefaultState(today) {
  return {
    productiveTime: 0,
    unproductiveTime: 0,
    isProductiveRunning: false,
    isUnproductiveRunning: false,
    firstStartTime: null,
    lastEndTime: null,
    longestProductiveSession: 0,
    currentSessionStart: 0,
    breaksCount: 0,
    activityLog: [],
    lastActivityDate: today
  };
}

function saveState(state) {
  state.lastActivityDate = new Date().toDateString();
  localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
}

// ========== TIMER FUNCTIONS ========== //
function startProductiveTimer() {
  if (appState.isProductiveRunning) return;
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞ –¥–µ–Ω—å
  if (!appState.firstStartTime) {
    appState.firstStartTime = new Date();
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–π —Ç–∞–π–º–µ—Ä
  appState.isProductiveRunning = true;
  appState.currentSessionStart = Date.now();
  appState.breaksCount++;
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π —Ç–∞–π–º–µ—Ä
  stopUnproductiveTimer();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
  addActivityLog('–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  appState.productiveInterval = setInterval(() => {
    appState.productiveTime++;
    updateTimerDisplay();
    saveState(appState);
  }, 1000);
  
  updateTimerDisplay();
  saveState(appState);
}

function pauseProductiveTimer() {
  if (!appState.isProductiveRunning) return;
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–π —Ç–∞–π–º–µ—Ä
  appState.isProductiveRunning = false;
  clearInterval(appState.productiveInterval);
  
  // –§–∏–∫—Å–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞
  const sessionDuration = Math.floor((Date.now() - appState.currentSessionStart) / 1000);
  if (sessionDuration > appState.longestProductiveSession) {
    appState.longestProductiveSession = sessionDuration;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π —Ç–∞–π–º–µ—Ä
  startUnproductiveTimer();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
  addActivityLog('–ü–µ—Ä–µ—Ä—ã–≤');
  
  saveState(appState);
}

function startUnproductiveTimer() {
  if (appState.isUnproductiveRunning) return;
  
  appState.isUnproductiveRunning = true;
  appState.unproductiveInterval = setInterval(() => {
    appState.unproductiveTime++;
    updateTimerDisplay();
    saveState(appState);
  }, 1000);
}

function stopUnproductiveTimer() {
  if (!appState.isUnproductiveRunning) return;
  
  appState.isUnproductiveRunning = false;
  clearInterval(appState.unproductiveInterval);
}

function resetTimers() {
  appState.productiveTime = 0;
  appState.unproductiveTime = 0;
  updateTimerDisplay();
  saveState(appState);
}

// ========== SLEEP COUNTDOWN ========== //
function startSleepCountdown() {
  pauseProductiveTimer();
  stopUnproductiveTimer();
  
  elements.sleepCountdownEl.classList.remove('hidden');
  
  let countdown = 5;
  elements.countdownEl.textContent = countdown;
  
  appState.countdownInterval = setInterval(() => {
    countdown--;
    elements.countdownEl.textContent = countdown;
    
    if (countdown <= 0) {
      clearInterval(appState.countdownInterval);
      finishDay();
    }
  }, 1000);
}

function cancelSleepCountdown() {
  clearInterval(appState.countdownInterval);
  elements.sleepCountdownEl.classList.add('hidden');
}

// ========== DAY FINISH ========== //
function finishDay() {
  appState.lastEndTime = new Date();
  saveDailyStats(appState);
  showStats();
  resetStateForNewDay();
}

function resetStateForNewDay() {
  appState = getDefaultState(new Date().toDateString());
  saveState(appState);
  updateTimerDisplay();
}

function saveDailyStats(state) {
  const stats = {
    date: state.lastActivityDate,
    productiveTime: state.productiveTime,
    unproductiveTime: state.unproductiveTime,
    longestSession: state.longestProductiveSession
  };
  
  const allStats = JSON.parse(localStorage.getItem('timeTrackerStats') || '[]');
  allStats.push(stats);
  localStorage.setItem('timeTrackerStats', JSON.stringify(allStats));
}

// ========== STATISTICS ========== //
function showStats() {
  elements.sleepCountdownEl.classList.add('hidden');
  elements.statsPanel.classList.remove('hidden');
  calculateStatistics();
}

function calculateStatistics() {
  const totalSeconds = appState.productiveTime + appState.unproductiveTime;
  
  // 1. –û–±—â–µ–µ –≤—Ä–µ–º—è
  elements.totalTimeEl.textContent = formatTime(totalSeconds);
  
  // 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
  const productivePercent = totalSeconds > 0 
    ? Math.round((appState.productiveTime / totalSeconds) * 100) 
    : 0;
  const unproductivePercent = 100 - productivePercent;
  
  updateChart(appState.productiveTime, appState.unproductiveTime);
  elements.productivePercentEl.textContent = `${productivePercent}%`;
  elements.unproductivePercentEl.textContent = `${unproductivePercent}%`;
  
  // 3. –ú–æ—Ç–∏–≤–∞—Ü–∏—è
  setMotivationMessage(productivePercent);
  
  // 4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  if (appState.firstStartTime) {
    elements.startTimeEl.textContent = `–ù–∞—á–∞–ª–æ: ${formatTimeToHours(appState.firstStartTime)}`;
  }
  if (appState.lastEndTime) {
    elements.endTimeEl.textContent = `–û–∫–æ–Ω—á–∞–Ω–∏–µ: ${formatTimeToHours(appState.lastEndTime)}`;
  }
  
  // 5. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  elements.longestSessionEl.textContent = `–õ—É—á—à–∏–π —Å–µ–∞–Ω—Å: ${formatTime(appState.longestProductiveSession)}`;
  elements.breaksCountEl.textContent = `–ü–µ—Ä–µ—Ä—ã–≤–æ–≤: ${appState.breaksCount}`;
  
  // 6. –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  renderActivityLog();
}

function updateChart(productiveTime, unproductiveTime) {
  if (!productivityChart) {
    initChart();
  }
  
  productivityChart.data.datasets[0].data = [productiveTime, unproductiveTime];
  productivityChart.update();
}

function initChart() {
  const ctx = elements.productivityChart.getContext('2d');
  productivityChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['–ü–æ–ª–µ–∑–Ω–æ', '–ë–µ—Å–ø–æ–ª–µ–∑–Ω–æ'],
      datasets: [{
        data: [0, 0],
        backgroundColor: [getComputedStyle(document.documentElement).getPropertyValue('--productive'), 
                        getComputedStyle(document.documentElement).getPropertyValue('--unproductive')],
        borderWidth: 0
      }]
    },
    options: {
      cutout: '70%',
      plugins: {
        legend: { display: false },
        tooltip: { enabled: false }
      },
      animation: {
        animateScale: true,
        animateRotate: true
      }
    }
  });
}

function setMotivationMessage(percent) {
  const messages = {
    high: { text: "üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", color: "#2ecc71" },
    medium: { text: "üëç –•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏", color: "#f39c12" },
    low: { text: "ü§î –°—Ç–æ–∏—Ç –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", color: "#e74c3c" }
  };
  
  let selectedMessage;
  if (percent >= 80) selectedMessage = messages.high;
  else if (percent >= 50) selectedMessage = messages.medium;
  else selectedMessage = messages.low;
  
  elements.motivationEl.textContent = selectedMessage.text;
  elements.motivationEl.style.color = selectedMessage.color;
  
  // –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
  const tips = [
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro (25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞)",
    "–í—ã–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
    "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å —Å —É—Ç—Ä–∞",
    "–î–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 45-60 –º–∏–Ω—É—Ç",
    "–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"
  ];
  elements.adviceEl.textContent = tips[Math.floor(Math.random() * tips.length)];
}

// ========== ACTIVITY LOG ========== //
function addActivityLog(action) {
  const now = new Date();
  appState.activityLog.unshift({
    time: now.toLocaleTimeString(),
    action: action,
    timestamp: now.getTime()
  });
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥ 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
  if (appState.activityLog.length > 20) {
    appState.activityLog.pop();
  }
}

function renderActivityLog() {
  elements.activityLogEl.innerHTML = '<h3>üìù –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>';
  
  if (appState.activityLog.length === 0) {
    elements.activityLogEl.innerHTML += '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>';
    return;
  }
  
  appState.activityLog.forEach(entry => {
    const entryEl = document.createElement('div');
    entryEl.className = 'activity-entry';
    entryEl.innerHTML = `
      <span>${entry.time}</span>
      <strong>${entry.action}</strong>
    `;
    elements.activityLogEl.appendChild(entryEl);
  });
}

// ========== HISTORY ========== //
function showHistory() {
  const history = JSON.parse(localStorage.getItem('timeTrackerStats') || '[]');
  const historyList = document.getElementById('history-list');
  
  historyList.innerHTML = history.length === 0 
    ? '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏</p>'
    : history.reverse().map(day => `
        <div class="history-item">
          <div class="history-date">${new Date(day.date).toLocaleDateString()}</div>
          <div class="history-stats">
            <span class="productive">–ü–æ–ª–µ–∑–Ω–æ: ${formatTime(day.productiveTime)}</span>
            <span class="unproductive">–ë–µ—Å–ø–æ–ª–µ–∑–Ω–æ: ${formatTime(day.unproductiveTime)}</span>
          </div>
          <div>–õ—É—á—à–∏–π —Å–µ–∞–Ω—Å: ${formatTime(day.longestSession)}</div>
        </div>
      `).join('');
  
  elements.historyModal.classList.remove('hidden');
}

// ========== UTILITIES ========== //
function formatTime(seconds) {
  const hrs = Math.floor(seconds / 3600);
  const mins = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

function formatTimeToHours(date) {
  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

function updateTimerDisplay() {
  elements.productiveTimer.textContent = formatTime(appState.productiveTime);
  elements.unproductiveTimer.textContent = formatTime(appState.unproductiveTime);
}

// ========== INITIALIZATION ========== //
const elements = {
  productiveTimer: document.getElementById('productive-timer'),
  unproductiveTimer: document.getElementById('unproductive-timer'),
  startBtn: document.getElementById('start-productive'),
  pauseBtn: document.getElementById('pause-productive'),
  resetBtn: document.getElementById('reset-all-timers'),
  finishDayBtn: document.getElementById('reset-all'),
  sleepCountdownEl: document.getElementById('sleep-countdown'),
  countdownEl: document.getElementById('countdown'),
  cancelSleepBtn: document.getElementById('cancel-sleep'),
  statsPanel: document.getElementById('stats'),
  totalTimeEl: document.getElementById('total-time'),
  productivePercentEl: document.getElementById('productive-percent'),
  unproductivePercentEl: document.getElementById('unproductive-percent'),
  productivityChart: document.getElementById('productivityChart'),
  motivationEl: document.getElementById('motivation'),
  adviceEl: document.getElementById('advice'),
  startTimeEl: document.getElementById('start-time'),
  endTimeEl: document.getElementById('end-time'),
  longestSessionEl: document.getElementById('longest-session'),
  breaksCountEl: document.getElementById('breaks-count'),
  activityLogEl: document.getElementById('activity-log'),
  newDayBtn: document.getElementById('start-new-day'),
  historyModal: document.getElementById('history-modal'),
  showHistoryBtn: document.getElementById('show-history')
};

let appState = loadState();

function setupEventListeners() {
  elements.startBtn.addEventListener('click', startProductiveTimer);
  elements.pauseBtn.addEventListener('click', pauseProductiveTimer);
  elements.resetBtn.addEventListener('click', resetTimers);
  elements.finishDayBtn.addEventListener('click', startSleepCountdown);
  elements.cancelSleepBtn.addEventListener('click', cancelSleepCountdown);
  elements.newDayBtn.addEventListener('click', startNewDay);
  elements.showHistoryBtn.addEventListener('click', showHistory);
  document.querySelector('.close-btn').addEventListener('click', () => {
    elements.historyModal.classList.add('hidden');
  });
}

function init() {
  setupEventListeners();
  updateTimerDisplay();
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (appState.isProductiveRunning) {
    const elapsed = Math.floor((Date.now() - appState.currentSessionStart) / 1000);
    appState.productiveTime += elapsed;
    startProductiveTimer();
  } else if (appState.isUnproductiveRunning) {
    startUnproductiveTimer();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
  initChart();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
init();
